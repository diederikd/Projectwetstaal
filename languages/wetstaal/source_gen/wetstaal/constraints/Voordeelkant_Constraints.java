package wetstaal.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class Voordeelkant_Constraints extends BaseConstraintsDescriptor {
  public Voordeelkant_Constraints() {
    super(CONCEPTS.Voordeelkant$_K);
  }

  public static class Name_Property extends BasePropertyConstraintsDescriptor {
    public Name_Property(ConstraintsDescriptor container) {
      super(PROPS.name$MnvL, container, true, false, false);
    }
    @Override
    public Object getValue(SNode node) {
      return "Voordeelkant " + SPropertyOperations.getString(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.rollen$hqtc)).getElement(1), LINKS.objectType$$zx0), PROPS.name$MnvL);
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.name$MnvL, new Name_Property(this));
    return properties;
  }
  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.rechtsbetrekking$4ksT, this, false, true) {
      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        return true;
      }
      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getChildren(referenceNode, LINKS.rollen$hqtc)).getElement(0), LINKS.objectType$$zx0, SLinkOperations.getTarget(newReferentNode, LINKS.voordeelkant$C51f));
        SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getChildren(referenceNode, LINKS.rollen$hqtc)).getElement(1), LINKS.objectType$$zx0, newReferentNode);
        SPropertyOperations.assign(ListSequence.fromList(SLinkOperations.getChildren(referenceNode, LINKS.rollen$hqtc)).getElement(0), PROPS.name$MnvL, SPropertyOperations.getString(newReferentNode, PROPS.tekstvoordeelkant$QiFz));
        SPropertyOperations.assign(ListSequence.fromList(SLinkOperations.getChildren(referenceNode, LINKS.rollen$hqtc)).getElement(1), PROPS.name$MnvL, "voordelen door " + SPropertyOperations.getString(newReferentNode, PROPS.name$MnvL));
        SPropertyOperations.assign(ListSequence.fromList(SLinkOperations.getChildren(referenceNode, LINKS.rollen$hqtc)).getElement(0), PROPS.frase$d0ev, "heeft");
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Voordeelkant$_K = MetaAdapterFactory.getConcept(0xe55f258baf614a6aL, 0x8f907f249af47f79L, 0x180645c76c3c8fe0L, "wetstaal.structure.Voordeelkant");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty tekstvoordeelkant$QiFz = MetaAdapterFactory.getProperty(0xe55f258baf614a6aL, 0x8f907f249af47f79L, 0x40929f0dfaddf55L, 0x96fffcfa841ba99L, "tekstvoordeelkant");
    /*package*/ static final SProperty frase$d0ev = MetaAdapterFactory.getProperty(0x471364db80784933L, 0xb2ef88232bfa34fcL, 0x4c364aa0da8640b4L, 0x4c364aa0da948c54L, "frase");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink rollen$hqtc = MetaAdapterFactory.getContainmentLink(0x471364db80784933L, 0xb2ef88232bfa34fcL, 0x4c364aa0da8640abL, 0x4c364aa0da8640bdL, "rollen");
    /*package*/ static final SReferenceLink objectType$$zx0 = MetaAdapterFactory.getReferenceLink(0x471364db80784933L, 0xb2ef88232bfa34fcL, 0x4c364aa0da8640b4L, 0x39e1bae6764bec4dL, "objectType");
    /*package*/ static final SReferenceLink rechtsbetrekking$4ksT = MetaAdapterFactory.getReferenceLink(0xe55f258baf614a6aL, 0x8f907f249af47f79L, 0x180645c76c3c8fe0L, 0x180645c76c3c8fe1L, "rechtsbetrekking");
    /*package*/ static final SReferenceLink voordeelkant$C51f = MetaAdapterFactory.getReferenceLink(0xe55f258baf614a6aL, 0x8f907f249af47f79L, 0x40929f0dfaddf55L, 0x180645c76c3c120aL, "voordeelkant");
  }
}
